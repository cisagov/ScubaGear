ProductName: teams
TestPlan:
  - PolicyId: MS.TEAMS.1.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.1v1 Non-compliant - Allows External Participant Give Request Control
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowExternalParticipantGiveRequestControl $true}"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.1v1 Compliant - Does not Allows  External Participant Give Request Control
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowExternalParticipantGiveRequestControl $false}"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.2v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.2v1 Non-compliant - Allows External Participant Give Request Control
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowAnonymousUsersToStartMeeting $true}"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.2v1 Compliant - Does not Allows  External Participant Give Request Control
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowAnonymousUsersToStartMeeting $false}"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.3v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.3v1 Non-compliant - Dialin bypass lobby; Everyone is autoadmitted user
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowPSTNUsersToBypassLobby: true
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: EveryOne
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.3v1 Non-complaint - Dialin bypass lobby; Everyone not auto admitted user
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowPSTNUsersToBypassLobby: true
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              AutoAdmittedUsers: EveryoneInCompany
              Identity: Global
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.3v1 Compliant - Dialin not bypass lobby Everyone not auto admitted user
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowPSTNUsersToBypassLobby: false
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              AutoAdmittedUsers: EveryoneInCompany
              Identity: Global
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.4v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.4v1 Non-compliant - AutoAdmittedUsers is Everyone
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowPSTNUsersToBypassLobby: true
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: EveryOne
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.4v1 Non-compliant - AutoAdmittedUsers = InvitedUsers
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: InvitedUsers
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.4v1 Non-compliant - AutoAdmittedUsers = OrganizerOnly
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowPSTNUsersToBypassLobby: false
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: OrganizerOnly
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.4v1 Compliant - AutoAdmittedUsers = EveryoneInCompany
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: EveryoneInCompany
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.4v1 Compliant - AutoAdmittedUsers = EveryoneInSameAndFederatedCompany
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: EveryoneInSameAndFederatedCompany
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.4v1 Compliant - AutoAdmittedUsers = EveryoneInCompanyExcludingGuests
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AutoAdmittedUsers: EveryoneInCompanyExcludingGuests
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.5v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.5v1 Non-compliant - AutoAdmittedUsers = InvitedUsers
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers InvitedUsers }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $true }"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.5v1 Non-compliant - AutoAdmittedUsers = Everyone
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers Everyone }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $true }"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.5v1 Non-compliant - AutoAdmittedUsers = EveryoneInCompany
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInCompany }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $true }"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.5v1 Non-compliant - AutoAdmittedUsers = EveryoneInSameAndFederatedCompany
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInSameAndFederatedCompany }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $true }"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.5v1 Non-compliant - AutoAdmittedUsers = EveryoneInCompanyExcludingGuests
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInCompanyExcludingGuests }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $true }"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.5v1 Compliant - AutoAdmittedUsers = InvitedUsers
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers InvitedUsers }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $false }"
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.5v1 Compliant - AutoAdmittedUsers = OrganizerOnly
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers OrganizerOnly }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $false }"
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.5v1 Compliant - AutoAdmittedUsers = EveryoneInCompany
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInCompany }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $false }"
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.5v1 Compliant - AutoAdmittedUsers = EveryoneInSameAndFederatedCompany
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInSameAndFederatedCompany }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $false }"
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.1.5v1 Compliant - AutoAdmittedUsers = EveryoneInCompanyExcludingGuests
        Preconditions:
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AutoAdmittedUsers EveryoneInCompanyExcludingGuests }"
          - Command: "Get-CsTeamsMeetingPolicy | Where-Object {$_.Identity -notin @('Tag:AllOn','Tag:AllOff','Tag:Kiosk','Tag:default','Tag:RestrictedAnonymousAccess','Tag:RestrictedAnonymousNoRecording')} | % {Set-CsTeamsMeetingPolicy -Identity $($_.Identity) -AllowPSTNUsersToBypassLobby $false }"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.6v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.6v1 Non-compliant - AllowCloudRecording = true
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowCloudRecording: true
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.6v1 Compliant - AllowCloudRecording = false
        Preconditions:
          - Command: Set-CsTeamsMeetingPolicy
            Splat:
              Identity: Global
              AllowCloudRecording: false
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.1.7v2
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.1.7v2 Non-compliant - BroadcastRecordingMode = AlwaysEnabled
        Preconditions:
          - Command: Set-CsTeamsMeetingBroadcastPolicy
            Splat:
              Identity: Global
              BroadcastRecordingMode: AlwaysEnabled
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.7v2 Non-compliant - BroadcastRecordingMode = AlwaysDisabled
        Preconditions:
          - Command: Set-CsTeamsMeetingBroadcastPolicy
            Splat:
              Identity: Global
              BroadcastRecordingMode: AlwaysDisabled
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.1.7v2 Compliant - BroadcastRecordingMode = UserOverride
        Preconditions:
          - Command: Set-CsTeamsMeetingBroadcastPolicy
            Splat:
              Identity: Global
              BroadcastRecordingMode: UserOverride
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.2.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.2.1v1 Non-compliant - Allow all known domains
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowFederatedUsers: true
          - Command: "Set-CsTenantFederationConfiguration -AllowedDomains (New-CsEdgeAllowAllKnownDomains)"
            Splat:
              AllowFederatedUsers: true
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.2.1v1 Compliant - Allow specific domain
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowFederatedUsers: true
          - Command: 'Set-CsTenantFederationConfiguration -AllowedDomains (New-CsEdgeAllowList -AllowedDomain (New-CsEdgeDomainPattern -Domain "domains.r.us"))'
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.2.1v1 Compliant - Do not allow federated users
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowFederatedUsers: false
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.2.2v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.2.2v1 Non-compliant - AllowTeamsConsumerInbound; AllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: true
              AllowTeamsConsumerInbound: true
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.2.2v1 Compliant - DoNotAllowTeamsConsumerInbound; AllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: true
              AllowTeamsConsumerInbound: false
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.2.2v1 Compliant - AllowTeamsConsumerInbound; DoNotAllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: false
              AllowTeamsConsumerInbound: true
        Postconditions: []
        ExpectedResult: true
      - TestDescription: MS.TEAMS.2.2v1 Compliant - DoNotAllowTeamsConsumerInbound; DoNotAllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: false
              AllowTeamsConsumerInbound: false
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.2.3v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.2.3v1 Non-compliant - AllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: true
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.2.3v1 Compliant - DoNotAllowTeamsConsumer
        Preconditions:
          - Command: Set-CsTenantFederationConfiguration
            Splat:
              AllowTeamsConsumer: false
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.5.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.5.1v1 Non-compliant - BlockedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -DefaultCatalogAppsType BlockedAppList -DefaultCatalogApps @()}"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.5.1v1 Compliant - AllowedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -DefaultCatalogAppsType AllowedAppList -DefaultCatalogApps @()}"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.5.2v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.5.2v1 Non-compliant - BlockedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -GlobalCatalogAppsType BlockedAppList -GlobalCatalogApps @()}"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.5.2v1 Compliant - AllowedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -GlobalCatalogAppsType AllowedAppList -GlobalCatalogApps @()}"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.5.3v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.5.3v1 Non-compliant - BlockedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -PrivateCatalogAppsType BlockedAppList -PrivateCatalogApps @()}"
        Postconditions: []
        ExpectedResult: false
      - TestDescription: MS.TEAMS.5.3v1 Compliant - AllowedAppList
        Preconditions:
          - Command: "Get-CsTeamsAppPermissionPolicy | % {Set-CsTeamsAppPermissionPolicy -Identity ($_.Identity) -PrivateCatalogAppsType AllowedAppList -PrivateCatalogApps @()}"
        Postconditions: []
        ExpectedResult: true
  - PolicyId: MS.TEAMS.6.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.6.1v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
      - TestDescription: MS.TEAMS.6.2v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
  - PolicyId: MS.TEAMS.7.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.7.1v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
      - TestDescription: MS.TEAMS.7.2v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
  - PolicyId: MS.TEAMS.8.1v1
    TestDriver: RunScuba
    Tests:
      - TestDescription: MS.TEAMS.8.1v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
      - TestDescription: MS.TEAMS.8.2v1 Compliant - Custom Implementation
        Preconditions: []
        Postconditions: []
        IsCustomImplementation: true
        ExpectedResult: false
