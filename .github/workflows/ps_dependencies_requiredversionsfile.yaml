name: Bump RequiredVersions PowerShell Dependencies
# This workflow bumps the PowerShell dependencies in the PowerShell/ScubaGear/RequiredVersions.ps1 file.
# It runs on a schedule and can also be triggered manually.
# The workflow uses the PSScriptAnalyzer and PSDepend modules to analyze and update the dependencies.

on:
  schedule:
    - cron: "15 6 * * 1-5"
  workflow_dispatch:

jobs:
  bump-dependencies:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (if needed)
        run: |
          pwsh -Command "if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) { Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser }"
          pwsh -Command "if (-not (Get-Module -ListAvailable -Name PSDepend)) { Install-Module -Name PSDepend -Force -Scope CurrentUser }"

      - name: Bump PowerShell dependencies
        run: |
          pwsh -File ./utils/workflow/BumpPsDependencies.ps1

      - name: Update dependencies documentation table
        run: |
          pwsh -File ./utils/workflow/UpdateDependenciesTable.ps1

      - name: Commit changes and create new branch
        id: create_branch
        shell: pwsh
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add ./PowerShell/ScubaGear/RequiredVersions.ps1
          git add ./docs/prerequisites/dependencies.md
          git commit -m 'Bump PowerShell dependencies and update documentation' || echo "No changes to commit"
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $branchName = "bump-dependencies-$timestamp"
          git branch $branchName
          git push -u origin $branchName
          echo "BRANCH_NAME=$branchName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Trigger and wait for smoke test workflow
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        shell: pwsh
        run: |
          $headers = @{
            Authorization = "Bearer $env:GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
          }

          # Trigger the workflow
          $body = @{
            ref = "$env:BRANCH_NAME"
          } | ConvertTo-Json

          $response = Invoke-RestMethod -Method Post `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/run_smoke_test.yaml/dispatches" `
            -Headers $headers `
            -Body $body

          Write-Host "Smoke test workflow triggered successfully"

          # Wait a bit for the workflow to start
          Start-Sleep -Seconds 30

          # Get the latest workflow run for our branch
          $runsResponse = Invoke-RestMethod -Method Get `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/run_smoke_test.yaml/runs?branch=$env:BRANCH_NAME&per_page=1" `
            -Headers $headers

          if ($runsResponse.workflow_runs.Count -eq 0) {
            throw "No smoke test workflow run found for branch $env:BRANCH_NAME"
          }

          $runId = $runsResponse.workflow_runs[0].id
          $runUrl = $runsResponse.workflow_runs[0].html_url
          Write-Host "Monitoring smoke test workflow run: $runUrl"

          # Poll for completion
          $maxWaitMinutes = 30
          $pollIntervalSeconds = 30
          $maxPolls = ($maxWaitMinutes * 60) / $pollIntervalSeconds
          $pollCount = 0

          do {
            Start-Sleep -Seconds $pollIntervalSeconds
            $pollCount++

            $runStatus = Invoke-RestMethod -Method Get `
              -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs/$runId" `
              -Headers $headers

            $status = $runStatus.status
            $conclusion = $runStatus.conclusion

            Write-Host "Smoke test status: $status, conclusion: $conclusion (poll $pollCount/$maxPolls)"

            if ($status -eq "completed") {
              if ($conclusion -eq "success") {
                Write-Host "✅ Smoke test workflow completed successfully"
                break
              }
              else {
                throw "❌ Smoke test workflow failed with conclusion: $conclusion. Check: $runUrl"
              }
            }

            if ($pollCount -ge $maxPolls) {
              throw "⏰ Smoke test workflow timed out after $maxWaitMinutes minutes. Check: $runUrl"
            }

          } while ($status -ne "completed")

      - name: Create pull request
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        run: |
          echo $env:GITHUB_TOKEN | gh auth login --with-token
          gh pr create --base main --head $env:BRANCH_NAME --title "Bump PowerShell Dependencies" --body-file .github/pull_request_template.md
          
