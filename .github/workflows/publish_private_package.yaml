# Purpose: Publishes ScubaGear to a private repo and caches ScubaGear modules and OPA for reuse.
# Note: To test this workflow, run the functional tests.

name: Publish Private Package

# This is a reusable workflow called by the pipeline.
on:
  workflow_call:
    secrets:
      ClientId:
        required: true
      TenantId:
        required: true
      SubscriptionId:
        required: true
      KeyVaultInfo:
        required: true

permissions:
  id-token: write
  contents: write

env:
  GalleryName: PrivateScubaGearGallery

jobs:
  publish:
    name: Private Repo
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Install Azure Signing Tool
        run: |
          . repo/utils/workflow/Install-AzureSignTool.ps1
          Install-AzureSignTool
      # OIDC Login to Azure Public Cloud with AzPowershell
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ClientId }}
          tenant-id: ${{ secrets.TenantId }}
          subscription-id: ${{ secrets.SubscriptionId }}
          enable-AzPSSession: true
      - name: Get Key Vault Info
        id: key-vault-info
        env:
          KEY_VAULT_INFO: ${{ secrets.KeyVaultInfo }}
        # Do not attempt to access the Key Vault if logging into Azure failed.
        if: ${{ success() }}
        run: |
          $KeyVaultInfo = ${env:KEY_VAULT_INFO} | ConvertFrom-Json
          echo "KeyVaultUrl=$($KeyVaultInfo.KeyVault.URL)" >> $env:GITHUB_OUTPUT
          echo "KeyVaultCertificateName=$($KeyVaultInfo.KeyVault.CertificateName)" >> $env:GITHUB_OUTPUT
      - name: Create Private Gallery
        run: |
          . repo/utils/workflow/Publish-ScubaGear.ps1
          cd repo
          New-PrivateGallery -GalleryName $env:GalleryName -Trusted
      - name: Sign and Publish Module
        id: sign-publish-module
        run: |
          . repo/utils/workflow/Publish-ScubaGear.ps1
          Remove-NonReleaseFiles -RootFolderName "repo"
          # Setup the parameters
          $Parameters = @{
            AzureKeyVaultUrl = '${{ steps.key-vault-info.outputs.KeyVaultUrl }}'
            CertificateName = '${{ steps.key-vault-info.outputs.KeyVaultCertificateName }}'
            ModuleSourcePath = 'repo/PowerShell/ScubaGear'
            GalleryName = $env:GalleryName
          }
          # This publishes to a private gallery, from which we will pull in a future step.
          # This step helps us verify that ScubaGear is in a state where it can be
          # published to PSGallery.
          Publish-ScubaGearModule @Parameters
      - name: Test Module Publish
        run: |
          Get-Location
          $TestContainers = @()
          $TestContainers += New-PesterContainer -Path "repo/Testing/Functional/BuildTest" -Data @{ }
          $PesterConfig = @{
            Run = @{
              Container = $TestContainers
            }
            Output = @{
              Verbosity = 'Detailed'
            }
          }
          $Config = New-PesterConfiguration -Hashtable $PesterConfig
          Invoke-Pester -Configuration $Config
      - name: Initialize ScubaGear
        run: |
          # This step initializes SG and runs some checks to verify that it installed correctly.
          $ExpectedName = 'ScubaGear'
          # Read the description value from the manifest file (ScubaGear.psd1)
          $ManifestFilePath = Join-Path -Path repo/PowerShell/ScubaGear -ChildPath 'ScubaGear.psd1' -Resolve
          $Manifest = Import-PowerShellDataFile $ManifestFilePath
          $ExpectedDescription = $Manifest.Description
          # The -PassThru parameters allows us to read the output value from Install-Module
          $InstallOutput = Install-Module -Name ScubaGear -Repository $env:GalleryName -SkipPublisherCheck -PassThru
          # Check #1 - verify that module was installed
          $module = Get-Module -ListAvailable -Name $ExpectedName
          if (-not ($module -ne $null -and -not [string]::IsNullOrEmpty($module)))
          {
            Write-Output "::error::The ScubaGear module was not installed."
            exit 1
          }
          # Check #2 - check for the expected name.
          if ($InstallOutput.Name -ne $ExpectedName) {
            Write-Output "The actual name of the output"
            Write-Output $InstallOutput.Name
            Write-Output "Entire object"
            Write-Output $InstallOutput
            Write-Output "::error::The name of the published module should be $ExpectedName"
            exit 1
          }
          # Because reasons, the description has a newline character.
          # Strip all whitespace before comparing the descriptions.
          $DescriptionFixed = $InstallOutput.Description -replace "\s", ""
          $ExpectedFixed = $ExpectedDescription -replace "\s", ""
          # Check #3 - check for the expected description.
          if ($DescriptionFixed -ne $ExpectedFixed) {
            Write-Output "::error::The description of the published module should be $ExpectedDescription"
            exit 1
          }
          . repo/utils/workflow/Initialize-ScubaGearForTesting.ps1
          Initialize-ScubaGearForTesting
          # Check #3 - verify that the version flag works
          $ExpectedVersion = (Import-PowerShellDataFile $ManifestFilePath).ModuleVersion
          $ActualVersion = Invoke-SCuBA -Version
          if ($ActualVersion -notmatch $ExpectedVersion) {
            Write-Output "::error::The module version should contain with $ExpectedVersion"
            exit 1
          }
          # Check #4 - see if the path exists
          # This check is a bit too fragile. It checks if ScubaGear is installed in the
          # first path in env:PSModulePath. When ScubaGear could be installed in any of those paths.
          # Will leave this check in for now but not make this an error message.
          $ModulePath = ($env:PSModulePath -split ';')[0] + '\ScubaGear'
          $PathExists = Test-Path -Path "$ModulePath"
          if ($PathExists -ne $true) {
            Write-Output "ScubaGear was not installed into the first path."
          }
      - name: Install Selenium
        run: |
          . repo/utils/workflow/Install-SeleniumForTesting.ps1
          Install-SeleniumForTesting
      # Instead of initializing ScubaGear repeated for each of the test jobs below,
      # we cache the PowerShell modules and OPA here and then restore them for the jobs.
      # It's about a 20% performance improvement.
      - name: Cache ScubaGear
        id: scubagear-directory
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files\WindowsPowerShell\Modules\ScubaGear
          key: "scubagear-directory-${{ github.run_id }}"
      - name: Cache Dependencies
        id: powershell-directory
        uses: actions/cache/save@v4
        with:
          path: C:\Users\runneradmin\Documents\WindowsPowerShell\Modules
          key: "powershell-directory-${{ github.run_id }}"
      - name: Cache OPA
        id: opa-directory
        uses: actions/cache/save@v4
        with:
          path: C:\Users\runneradmin\.scubagear\Tools
          key: "opa-directory-${{ github.run_id }}"
