# Purpose: Publish on demand to the real gallery (PSGallery).
# Note: If the published package is pre-release, then all 3 of the manual inputs (the module version, the pre-release boolean, and the tag) should be entered.

name: Publish Public Package

on:
  workflow_dispatch:
    inputs:
      # checkov:skip=CKV_GHA_7:Manual inputs are desired.
      OverrideModuleVersion:
        description: "Always enter the release version in semantic version format, Major.Minor.Patch (e.g., 1.3.0):"
        required: false
        type: string
      IsPrerelease:
        description: "If pre-release, check here:"
        required: false
        type: boolean
        default: false
      PrereleaseTag:
        description: "If pre-release, enter prerelease tag in [0-9A-Za-z]+ format (e.g., alpha1, rc2, test04):"
        required: false
        type: string

permissions: read-all

jobs:
  publish:
    name: Publish to PSGallery
    runs-on: windows-latest
    environment: Development
    permissions:
      id-token: write
      contents: write
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Install Azure Signing Tool
        run: |
          . repo/utils/workflow/Install-AzureSignTool.ps1
          Install-AzureSignTool
      # OIDC Login to Azure Public Cloud with AzPowershell
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      - name: Get Key Vault info
        id: key-vault-info
        env:
          KEY_VAULT_INFO: ${{ secrets.SCUBA_KEY_VAULT_PROD}}
        run: |
          . repo/utils/workflow/Publish-PublicPackage.ps1
          $KeyVaultData = Get-KeyVaultInfo -KeyVaultInfo ${env:KEY_VAULT_INFO}
          echo "KeyVaultUrl=$($KeyVaultData.KeyVaultUrl)" >> $env:GITHUB_OUTPUT
          echo "KeyVaultCertificateName=$($KeyVaultData.KeyVaultCertificateName)" >> $env:GITHUB_OUTPUT
      - name: Sign and Publish Module
        run: |
          . repo/utils/workflow/Publish-ScubaGear.ps1
          . repo/utils/workflow/Publish-PublicPackage.ps1

          # Remove non-release files
          Remove-GitFiles -RootFolderPath "repo"

          # Extract the API key used to publish to PSGallery
          $ApiKey = Get-PSGalleryApiKey -KeyVaultUrl '${{ steps.key-vault-info.outputs.KeyVaultUrl }}'

          # Setup the parameters using the new function
          $Parameters = Set-PublishParameters `
            -AzureKeyVaultUrl '${{ steps.key-vault-info.outputs.KeyVaultUrl }}' `
            -CertificateName '${{ steps.key-vault-info.outputs.KeyVaultCertificateName }}' `
            -ModuleSourcePath 'repo/PowerShell/ScubaGear' `
            -ApiKey $ApiKey `
            -IsPrerelease ('true' -eq '${{ inputs.IsPrerelease }}') `
            -PrereleaseTag '${{ inputs.PrereleaseTag }}' `
            -OverrideModuleVersion '${{ inputs.OverrideModuleVersion }}'

          # This publishes to PSGallery.
          Publish-ScubaGearModule @Parameters
      # This is a manual test that simply writes the version to the console
      - name: Test Scuba Version
        run: |
          . repo/utils/workflow/Publish-PublicPackage.ps1

          # Test that the module was published successfully
          $TestResult = Test-PublishedModule `
            -IsPrerelease ('true' -eq '${{ inputs.IsPrerelease }}') `
            -ModuleVersion '${{ inputs.OverrideModuleVersion }}' `
            -PrereleaseTag '${{ inputs.PrereleaseTag }}' `
            -WaitSeconds 30

          if (-not $TestResult) {
            Write-Error "Module test failed - module not found in PSGallery"
            exit 1
          }

          Write-Output "Module test completed successfully"
